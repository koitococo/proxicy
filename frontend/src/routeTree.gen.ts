/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LogsIndexImport } from './routes/logs/index'
import { Route as ApiKeysIndexImport } from './routes/api-keys/index'
import { Route as DashboardIndexImport } from './routes/_dashboard/index'

// Create/Update Routes

const LogsIndexRoute = LogsIndexImport.update({
  id: '/logs/',
  path: '/logs/',
  getParentRoute: () => rootRoute,
} as any)

const ApiKeysIndexRoute = ApiKeysIndexImport.update({
  id: '/api-keys/',
  path: '/api-keys/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/_dashboard/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_dashboard/': {
      id: '/_dashboard/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof rootRoute
    }
    '/api-keys/': {
      id: '/api-keys/'
      path: '/api-keys'
      fullPath: '/api-keys'
      preLoaderRoute: typeof ApiKeysIndexImport
      parentRoute: typeof rootRoute
    }
    '/logs/': {
      id: '/logs/'
      path: '/logs'
      fullPath: '/logs'
      preLoaderRoute: typeof LogsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof DashboardIndexRoute
  '/api-keys': typeof ApiKeysIndexRoute
  '/logs': typeof LogsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof DashboardIndexRoute
  '/api-keys': typeof ApiKeysIndexRoute
  '/logs': typeof LogsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_dashboard/': typeof DashboardIndexRoute
  '/api-keys/': typeof ApiKeysIndexRoute
  '/logs/': typeof LogsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/api-keys' | '/logs'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/api-keys' | '/logs'
  id: '__root__' | '/_dashboard/' | '/api-keys/' | '/logs/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  DashboardIndexRoute: typeof DashboardIndexRoute
  ApiKeysIndexRoute: typeof ApiKeysIndexRoute
  LogsIndexRoute: typeof LogsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  DashboardIndexRoute: DashboardIndexRoute,
  ApiKeysIndexRoute: ApiKeysIndexRoute,
  LogsIndexRoute: LogsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_dashboard/",
        "/api-keys/",
        "/logs/"
      ]
    },
    "/_dashboard/": {
      "filePath": "_dashboard/index.tsx"
    },
    "/api-keys/": {
      "filePath": "api-keys/index.tsx"
    },
    "/logs/": {
      "filePath": "logs/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
