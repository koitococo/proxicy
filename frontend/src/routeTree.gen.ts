/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RequestsRouteImport } from './routes/requests/route'
import { Route as ProvidersRouteImport } from './routes/providers/route'
import { Route as AppsRouteImport } from './routes/apps/route'
import { Route as DashboardRouteImport } from './routes/_dashboard/route'
import { Route as RequestsIndexImport } from './routes/requests/index'
import { Route as ProvidersIndexImport } from './routes/providers/index'
import { Route as AppsIndexImport } from './routes/apps/index'
import { Route as DashboardIndexImport } from './routes/_dashboard/index'

// Create/Update Routes

const RequestsRouteRoute = RequestsRouteImport.update({
  id: '/requests',
  path: '/requests',
  getParentRoute: () => rootRoute,
} as any)

const ProvidersRouteRoute = ProvidersRouteImport.update({
  id: '/providers',
  path: '/providers',
  getParentRoute: () => rootRoute,
} as any)

const AppsRouteRoute = AppsRouteImport.update({
  id: '/apps',
  path: '/apps',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRouteRoute = DashboardRouteImport.update({
  id: '/_dashboard',
  getParentRoute: () => rootRoute,
} as any)

const RequestsIndexRoute = RequestsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => RequestsRouteRoute,
} as any)

const ProvidersIndexRoute = ProvidersIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProvidersRouteRoute,
} as any)

const AppsIndexRoute = AppsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppsRouteRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_dashboard': {
      id: '/_dashboard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRoute
    }
    '/apps': {
      id: '/apps'
      path: '/apps'
      fullPath: '/apps'
      preLoaderRoute: typeof AppsRouteImport
      parentRoute: typeof rootRoute
    }
    '/providers': {
      id: '/providers'
      path: '/providers'
      fullPath: '/providers'
      preLoaderRoute: typeof ProvidersRouteImport
      parentRoute: typeof rootRoute
    }
    '/requests': {
      id: '/requests'
      path: '/requests'
      fullPath: '/requests'
      preLoaderRoute: typeof RequestsRouteImport
      parentRoute: typeof rootRoute
    }
    '/_dashboard/': {
      id: '/_dashboard/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof DashboardRouteImport
    }
    '/apps/': {
      id: '/apps/'
      path: '/'
      fullPath: '/apps/'
      preLoaderRoute: typeof AppsIndexImport
      parentRoute: typeof AppsRouteImport
    }
    '/providers/': {
      id: '/providers/'
      path: '/'
      fullPath: '/providers/'
      preLoaderRoute: typeof ProvidersIndexImport
      parentRoute: typeof ProvidersRouteImport
    }
    '/requests/': {
      id: '/requests/'
      path: '/'
      fullPath: '/requests/'
      preLoaderRoute: typeof RequestsIndexImport
      parentRoute: typeof RequestsRouteImport
    }
  }
}

// Create and export the route tree

interface DashboardRouteRouteChildren {
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

interface AppsRouteRouteChildren {
  AppsIndexRoute: typeof AppsIndexRoute
}

const AppsRouteRouteChildren: AppsRouteRouteChildren = {
  AppsIndexRoute: AppsIndexRoute,
}

const AppsRouteRouteWithChildren = AppsRouteRoute._addFileChildren(
  AppsRouteRouteChildren,
)

interface ProvidersRouteRouteChildren {
  ProvidersIndexRoute: typeof ProvidersIndexRoute
}

const ProvidersRouteRouteChildren: ProvidersRouteRouteChildren = {
  ProvidersIndexRoute: ProvidersIndexRoute,
}

const ProvidersRouteRouteWithChildren = ProvidersRouteRoute._addFileChildren(
  ProvidersRouteRouteChildren,
)

interface RequestsRouteRouteChildren {
  RequestsIndexRoute: typeof RequestsIndexRoute
}

const RequestsRouteRouteChildren: RequestsRouteRouteChildren = {
  RequestsIndexRoute: RequestsIndexRoute,
}

const RequestsRouteRouteWithChildren = RequestsRouteRoute._addFileChildren(
  RequestsRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof DashboardRouteRouteWithChildren
  '/apps': typeof AppsRouteRouteWithChildren
  '/providers': typeof ProvidersRouteRouteWithChildren
  '/requests': typeof RequestsRouteRouteWithChildren
  '/': typeof DashboardIndexRoute
  '/apps/': typeof AppsIndexRoute
  '/providers/': typeof ProvidersIndexRoute
  '/requests/': typeof RequestsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof DashboardIndexRoute
  '/apps': typeof AppsIndexRoute
  '/providers': typeof ProvidersIndexRoute
  '/requests': typeof RequestsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_dashboard': typeof DashboardRouteRouteWithChildren
  '/apps': typeof AppsRouteRouteWithChildren
  '/providers': typeof ProvidersRouteRouteWithChildren
  '/requests': typeof RequestsRouteRouteWithChildren
  '/_dashboard/': typeof DashboardIndexRoute
  '/apps/': typeof AppsIndexRoute
  '/providers/': typeof ProvidersIndexRoute
  '/requests/': typeof RequestsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/apps'
    | '/providers'
    | '/requests'
    | '/'
    | '/apps/'
    | '/providers/'
    | '/requests/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/apps' | '/providers' | '/requests'
  id:
    | '__root__'
    | '/_dashboard'
    | '/apps'
    | '/providers'
    | '/requests'
    | '/_dashboard/'
    | '/apps/'
    | '/providers/'
    | '/requests/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  AppsRouteRoute: typeof AppsRouteRouteWithChildren
  ProvidersRouteRoute: typeof ProvidersRouteRouteWithChildren
  RequestsRouteRoute: typeof RequestsRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  AppsRouteRoute: AppsRouteRouteWithChildren,
  ProvidersRouteRoute: ProvidersRouteRouteWithChildren,
  RequestsRouteRoute: RequestsRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_dashboard",
        "/apps",
        "/providers",
        "/requests"
      ]
    },
    "/_dashboard": {
      "filePath": "_dashboard/route.tsx",
      "children": [
        "/_dashboard/"
      ]
    },
    "/apps": {
      "filePath": "apps/route.tsx",
      "children": [
        "/apps/"
      ]
    },
    "/providers": {
      "filePath": "providers/route.tsx",
      "children": [
        "/providers/"
      ]
    },
    "/requests": {
      "filePath": "requests/route.tsx",
      "children": [
        "/requests/"
      ]
    },
    "/_dashboard/": {
      "filePath": "_dashboard/index.tsx",
      "parent": "/_dashboard"
    },
    "/apps/": {
      "filePath": "apps/index.tsx",
      "parent": "/apps"
    },
    "/providers/": {
      "filePath": "providers/index.tsx",
      "parent": "/providers"
    },
    "/requests/": {
      "filePath": "requests/index.tsx",
      "parent": "/requests"
    }
  }
}
ROUTE_MANIFEST_END */
